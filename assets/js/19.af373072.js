(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{536:function(e,_,v){"use strict";v.r(_);var t=v(2),o=Object(t.a)({},(function(){var e=this,_=e.$createElement,v=e._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h2",{attrs:{id:"http的缓存有哪些方案"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#http的缓存有哪些方案"}},[e._v("#")]),e._v(" HTTP的缓存有哪些方案")]),e._v(" "),v("blockquote",[v("p",[v("a",{attrs:{href:"https://blog.csdn.net/wyouwd1/article/details/123469152",target:"_blank",rel:"noopener noreferrer"}},[e._v("参考博客"),v("OutboundLink")],1)])]),e._v(" "),v("p",[e._v("浏览器缓存分为"),v("strong",[e._v("强缓存")]),e._v("和"),v("strong",[e._v("协商缓存")]),e._v("。当客户端请求某个资源时，获取缓存的流程如下")]),e._v(" "),v("ul",[v("li",[e._v("先根据这个资源的一些 http header 判断它是否命中强缓存，先检查"),v("code",[e._v("Cache-Control")]),e._v("，如果命中，则直接从本地获取缓存资源，不会发请求到服务器；")]),e._v(" "),v("li",[e._v("当强缓存没有命中时，客户端会发送请求到服务器，服务器通过另一些request header验证这个资源是否命中协商缓存，称为http再验证，如果命中，服务器将请求返回，但不返回资源，而是返回304告诉客户端直接从缓存中获取，客户端收到返回后就会从缓存中获取资源；（服务器通过请求头中的"),v("code",[e._v("If-Modified-Since")]),e._v("或者"),v("code",[e._v("If-None-Match")]),e._v("字段检查资源是否更新）")]),e._v(" "),v("li",[e._v("强缓存和协商缓存共同之处在于，如果命中缓存，服务器都不会返回资源； 区别是，强缓存不会发送请求到服务器，但协商缓存会。")]),e._v(" "),v("li",[e._v("当协商缓存也没命中时，服务器就会将资源发送回客户端。")]),e._v(" "),v("li",[e._v("当 ctrl+f5 强制刷新网页时，直接从服务器加载，跳过强缓存和协商缓存；")]),e._v(" "),v("li",[e._v("当 f5刷新网页时，跳过强缓存，但是会检查协商缓存；")])]),e._v(" "),v("p",[v("strong",[e._v("强缓存")])]),e._v(" "),v("ul",[v("li",[e._v("Expires（该字段是 http1.0 时的规范，值为一个绝对时间的 GMT 格式的时间字符串，代表缓存资源的过期时间）")]),e._v(" "),v("li",[e._v("Cache-Control:max-age（该字段是 http1.1的规范，强缓存利用其 max-age 值来判断缓存资源的最大生命周期，它的值单位为秒）")])]),e._v(" "),v("p",[e._v("（如果同时出现"),v("code",[e._v("Cache-Control：max-age")]),e._v("和"),v("code",[e._v("Expires")]),e._v("，那么"),v("code",[e._v("max-age")]),e._v("优先级更高，因为"),v("code",[e._v("Expires")]),e._v("是绝对时间 如果用户的本地时间错乱了 可能会有问题，"),v("code",[e._v("max-age")]),e._v(" 是相对时间 和本地时间无关）")]),e._v(" "),v("p",[v("strong",[e._v("协商缓存")])]),e._v(" "),v("ul",[v("li",[e._v("Last-Modified（值为资源最后更新时间，随服务器response返回，即使文件改回去，日期也会变化）")]),e._v(" "),v("li",[e._v("If-Modified-Since（通过比较两个时间来判断资源在两次请求期间是否有过修改，如果没有修改，则命中协商缓存）")]),e._v(" "),v("li",[e._v("ETag（表示资源内容的唯一标识，随服务器response返回，仅根据文件内容是否变化判断）")]),e._v(" "),v("li",[e._v("If-None-Match（服务器通过比较请求头部的If-None-Match与当前资源的ETag是否一致来判断资源是否在两次请求之间有过修改，如果没有修改，则命中协商缓存）")])]),e._v(" "),v("p",[v("strong",[e._v("不会缓存的情况")])]),e._v(" "),v("ol",[v("li",[v("p",[e._v("HTTP 信息头中包含 Cache-Control:no-cache ，pragma:no-cache（HTTP1.0），或 Cache-Control: max-age=0 等告诉浏览器不用缓存的请求；")])]),e._v(" "),v("li",[v("p",[e._v("需要根据 Cookie，认证信息等决定输入内容的动态请求是不能被缓存的；")])]),e._v(" "),v("li",[v("p",[e._v("经过 HTTPS 安全加密的请求；")])]),e._v(" "),v("li",[v("p",[e._v("POST 请求无法被缓存；")])]),e._v(" "),v("li",[v("p",[e._v("HTTP 响应头中不包含 Last-Modified/Etag，也不包含 Cache-Control/Expires 的请求无法被缓存；")])])])])}),[],!1,null,null,null);_.default=o.exports}}]);