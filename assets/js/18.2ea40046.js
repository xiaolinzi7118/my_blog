(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{537:function(t,i,_){"use strict";_.r(i);var v=_(2),r=Object(v.a)({},(function(){var t=this,i=t.$createElement,_=t._self._c||i;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h2",{attrs:{id:"注册账户及创建仓库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#注册账户及创建仓库"}},[t._v("#")]),t._v(" 注册账户及创建仓库")]),t._v(" "),_("p",[t._v("步骤如下：")]),t._v(" "),_("p",[t._v("打开"),_("a",{attrs:{href:"https://github.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com"),_("OutboundLink")],1),t._v(" 直接在首页上注册")]),t._v(" "),_("p",[t._v("点按钮注册成功之后，在页面上方用户菜单上选择 “+”->New repository 创建一个新的仓库")]),t._v(" "),_("p",[t._v("为仓库取一个名字，点击创建仓库按钮 你将成功创建一个仓库")]),t._v(" "),_("h2",{attrs:{id:"安装git客户端"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#安装git客户端"}},[t._v("#")]),t._v(" 安装git客户端")]),t._v(" "),_("p",[t._v("github是服务端，要想在自己电脑上使用git我们还需要一个git客户端，")]),t._v(" "),_("p",[t._v("windows用户请下载 http://msysgit.github.com/")]),t._v(" "),_("p",[t._v("mac用户请下载 http://code.google.com/p/tortoisegit/")]),t._v(" "),_("p",[t._v("一路next，安装成功后， 回到C盘，或任何文件夹下，点鼠标右键会多出一些菜单 如 Git Init Hear、Git Bash、Git Gui ， 说明安装成功。")]),t._v(" "),_("h2",{attrs:{id:"配置git"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#配置git"}},[t._v("#")]),t._v(" 配置Git")]),t._v(" "),_("p",[t._v("我们先在电脑硬盘里找一块地方存放本地仓库，比如我们把本地仓库建立在C:\\MyRepository\\1ke_test文件夹下")]),t._v(" "),_("p",[t._v("进入1ke_test文件夹 鼠标右键操作如下步骤：")]),t._v(" "),_("p",[t._v("1）在本地仓库里右键选择Git Init Here，会多出来一个.git文件夹，这就表示本地git创建成功。右键Git Bash进入git命令行，截图效果如下：")]),t._v(" "),_("p",[t._v("为了保险起见，我们先执行git init命令")]),t._v(" "),_("p",[t._v("$ git init")]),t._v(" "),_("p",[t._v("为了把本地的仓库传到github，还需要配置ssh key。")]),t._v(" "),_("p",[t._v("2）在本地创建ssh key")]),t._v(" "),_("p",[t._v('$ ssh-keygen -t rsa -C "'),_("a",{attrs:{href:"mailto:your_email@youremail.com"}},[t._v("your_email@youremail.com")]),t._v('" 后面的'),_("a",{attrs:{href:"mailto:your_email@youremail.com"}},[t._v("your_email@youremail.com")]),t._v("改为自己的邮箱")]),t._v(" "),_("p",[t._v("直接点回车，说明会在默认文件id_rsa上生成ssh key。")]),t._v(" "),_("p",[t._v("然后系统要求输入密码，直接按回车表示不设密码")]),t._v(" "),_("p",[t._v("重复密码时也是直接回车，之后提示shh key已经生成成功。")]),t._v(" "),_("p",[t._v("然后我们进入提示的地址下查看ssh key文件。 电脑的地址是C:\\Users\\xxx.ssh ，其中xxx是自己的电脑的名称")]),t._v(" "),_("p",[t._v("打开id_rsa.pub，复制里面的key。")]),t._v(" "),_("p",[t._v("回到github网站，进入Account Settings，左边选择SSH Keys，Add SSH Key,")]),t._v(" "),_("p",[t._v("title随便填，粘贴key。")]),t._v(" "),_("p",[t._v("3）验证是否成功，在git bash下输入")]),t._v(" "),_("p",[t._v("$ ssh -T "),_("a",{attrs:{href:"mailto:git@github.com"}},[t._v("git@github.com")]),t._v(" 回车就会看到：You’ve successfully authenticated, but GitHub does not provide shell access 。这就表示已成功连上github。")]),t._v(" "),_("p",[t._v("4）接下来我们要做的就是把本地仓库传到github上去，在此之前还需要设置username和email，因为github每次commit都会记录他们")]),t._v(" "),_("p",[t._v('$ git config --global user.name "your name" $ git config --global user.email "'),_("a",{attrs:{href:"mailto:your_email@youremail.com"}},[t._v("your_email@youremail.com")]),t._v('" 分别输入上述命令行 回车')]),t._v(" "),_("p",[t._v("5）进入要上传的仓库，右键git bash，添加远程地址")]),t._v(" "),_("p",[t._v("$ git remote add origin "),_("a",{attrs:{href:"mailto:git@github.com"}},[t._v("git@github.com")]),t._v(":yourName/yourRepo.git 后面的yourName和yourRepo表示你再github的用户名和刚才新建的仓库，加完之后进入.git，打开config，这里会多出一个remote “origin”内容，这就是刚才添加的远程地址，也可以直接修改config来配置远程地址。")]),t._v(" "),_("p",[t._v("与github上的对应")]),t._v(" "),_("h2",{attrs:{id:"提交上传"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#提交上传"}},[t._v("#")]),t._v(" 提交上传")]),t._v(" "),_("p",[t._v("1）接下来在本地仓库里添加一些文件，比如README")]),t._v(" "),_("p",[t._v("在本地新建一个README文件")]),t._v(" "),_("p",[t._v("然后在命令行输入一下命令")]),t._v(" "),_("p",[t._v("$ git add README")]),t._v(" "),_("p",[t._v('$ git commit -m "first commit" 我的执行界面如下')]),t._v(" "),_("p",[t._v("2）上传到github")]),t._v(" "),_("p",[t._v("$ git push origin master git push命令会将本地仓库推送到远程服务器。")]),t._v(" "),_("p",[t._v("git pull命令则相反。")]),t._v(" "),_("p",[t._v("注：首次提交，先git pull下，修改完代码后，使用git status可以查看文件的差别，使用git add 添加要commit的文件。")]),t._v(" "),_("p",[t._v("大功告成，现在你知道如何将本地的项目提交到github上了。")]),t._v(" "),_("p",[_("strong",[t._v("gitignore文件")])]),t._v(" "),_("p",[t._v(".gitignore顾名思义就是告诉git需要忽略的文件，这是一个很重要并且很实用的文件。一般我们写完代码后会执行编译、调试等操作，这期间会产生很多中间文件和可执行文件，这些都不是代码文件，是不需要git来管理的。我们在git status的时候会看到很多这样的文件，如果用git add -A来添加的话会把他们都加进去，而手动一个个添加的话也太麻烦了。这时我们就需要.gitignore了。")]),t._v(" "),_("h2",{attrs:{id:"git命令"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git命令"}},[t._v("#")]),t._v(" Git命令")]),t._v(" "),_("h3",{attrs:{id:"查看、添加、提交、删除、找回-重置修改文件"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#查看、添加、提交、删除、找回-重置修改文件"}},[t._v("#")]),t._v(" 查看、添加、提交、删除、找回，重置修改文件")]),t._v(" "),_("p",[t._v("git help # 显示command的help")]),t._v(" "),_("p",[t._v("git show # 显示某次提交的内容 git show $id")]),t._v(" "),_("p",[t._v("git co -- # 抛弃工作区修改")]),t._v(" "),_("p",[t._v("git co . # 抛弃工作区修改")]),t._v(" "),_("p",[t._v("git add # 将工作文件修改提交到本地暂存区")]),t._v(" "),_("p",[t._v("git add . # 将所有修改过的工作文件提交暂存区")]),t._v(" "),_("p",[t._v("git rm # 从版本库中删除文件")]),t._v(" "),_("p",[t._v("git rm --cached # 从版本库中删除文件，但不删除文件")]),t._v(" "),_("p",[t._v("git reset # 从暂存区恢复到工作文件")]),t._v(" "),_("p",[t._v("git reset -- . # 从暂存区恢复到工作文件")]),t._v(" "),_("p",[t._v("git reset --hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改")]),t._v(" "),_("p",[t._v("git ci git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做")]),t._v(" "),_("p",[t._v("git ci --amend # 修改最后一次提交记录")]),t._v(" "),_("p",[t._v("git revert <$id> # 恢复某次提交的状态，恢复动作本身也创建次提交对象")]),t._v(" "),_("p",[t._v("git revert HEAD # 恢复最后一次提交的状态")]),t._v(" "),_("h3",{attrs:{id:"查看文件diff"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#查看文件diff"}},[t._v("#")]),t._v(" 查看文件diff")]),t._v(" "),_("p",[t._v("git diff # 比较当前文件和暂存区文件差异 git diff")]),t._v(" "),_("p",[t._v("git diff # 比较两次提交之间的差异")]),t._v(" "),_("p",[t._v("git diff .. # 在两个分支之间比较")]),t._v(" "),_("p",[t._v("git diff --staged # 比较暂存区和版本库差异")]),t._v(" "),_("p",[t._v("git diff --cached # 比较暂存区和版本库差异")]),t._v(" "),_("p",[t._v("git diff --stat # 仅仅比较统计信息")]),t._v(" "),_("h3",{attrs:{id:"查看提交记录"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#查看提交记录"}},[t._v("#")]),t._v(" 查看提交记录")]),t._v(" "),_("p",[t._v("git log git log # 查看该文件每次提交记录")]),t._v(" "),_("p",[t._v("git log -p # 查看每次详细修改内容的diff")]),t._v(" "),_("p",[t._v("git log -p -2 # 查看最近两次详细修改内容的diff")]),t._v(" "),_("p",[t._v("git log --stat #查看提交统计信息")]),t._v(" "),_("p",[t._v("tig Mac上可以使用tig代替diff和log，brew install tig")]),t._v(" "),_("h3",{attrs:{id:"git-本地分支管理-查看、切换、创建和删除分支"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git-本地分支管理-查看、切换、创建和删除分支"}},[t._v("#")]),t._v(" Git 本地分支管理 查看、切换、创建和删除分支")]),t._v(" "),_("p",[t._v("git br -r # 查看远程分支")]),t._v(" "),_("p",[t._v("git br <new_branch> # 创建新的分支")]),t._v(" "),_("p",[t._v("git br -v # 查看各个分支最后提交信息")]),t._v(" "),_("p",[t._v("git br --merged # 查看已经被合并到当前分支的分支")]),t._v(" "),_("p",[t._v("git br --no-merged # 查看尚未被合并到当前分支的分支")]),t._v(" "),_("p",[t._v("git co # 切换到某个分支")]),t._v(" "),_("p",[t._v("git co -b <new_branch> # 创建新的分支，并且切换过去")]),t._v(" "),_("p",[t._v("git co -b <new_branch> # 基于branch创建新的new_branch")]),t._v(" "),_("p",[t._v("git co $id # 把某次历史提交记录checkout出来，但无分支信息，切换到其他分支会自动删除")]),t._v(" "),_("p",[t._v("git co $id -b <new_branch> # 把某次历史提交记录checkout出来，创建成一个分支")]),t._v(" "),_("p",[t._v("git br -d # 删除某个分支")]),t._v(" "),_("p",[t._v("git br -D # 强制删除某个分支 (未被合并的分支被删除的时候需要强制)")]),t._v(" "),_("h3",{attrs:{id:"分支合并和rebase"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分支合并和rebase"}},[t._v("#")]),t._v(" 分支合并和rebase")]),t._v(" "),_("p",[t._v("git merge # 将branch分支合并到当前分支")]),t._v(" "),_("p",[t._v("git merge origin/master --no-ff # 不要Fast-Foward合并，这样可以生成merge提交")]),t._v(" "),_("p",[t._v("git rebase master # 将master rebase到branch，相当于： git co && git rebase master && git co master && git merge")]),t._v(" "),_("h3",{attrs:{id:"git补丁管理-方便在多台机器上开发同步时用"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git补丁管理-方便在多台机器上开发同步时用"}},[t._v("#")]),t._v(" Git补丁管理(方便在多台机器上开发同步时用)")]),t._v(" "),_("p",[t._v("git diff > ../sync.patch # 生成补丁")]),t._v(" "),_("p",[t._v("git apply ../sync.patch # 打补丁")]),t._v(" "),_("p",[t._v("git apply --check ../sync.patch #测试补丁能否成功")]),t._v(" "),_("h3",{attrs:{id:"git暂存管理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git暂存管理"}},[t._v("#")]),t._v(" Git暂存管理")]),t._v(" "),_("p",[t._v("git stash # 暂存")]),t._v(" "),_("p",[t._v("git stash list # 列所有stash")]),t._v(" "),_("p",[t._v("git stash apply # 恢复暂存的内容")]),t._v(" "),_("p",[t._v("git stash drop # 删除暂存区")]),t._v(" "),_("h3",{attrs:{id:"git远程分支管理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git远程分支管理"}},[t._v("#")]),t._v(" Git远程分支管理")]),t._v(" "),_("p",[t._v("git pull # 抓取远程仓库所有分支更新并合并到本地")]),t._v(" "),_("p",[t._v("git pull --no-ff # 抓取远程仓库所有分支更新并合并到本地，不要快进合并")]),t._v(" "),_("p",[t._v("git fetch origin # 抓取远程仓库更新")]),t._v(" "),_("p",[t._v("git merge origin/master # 将远程主分支合并到本地当前分支")]),t._v(" "),_("p",[t._v("git co --track origin/branch # 跟踪某个远程分支创建相应的本地分支")]),t._v(" "),_("p",[t._v("git co -b <local_branch> origin/<remote_branch> # 基于远程分支创建本地分支，功能同上")]),t._v(" "),_("p",[t._v("git push # push所有分支")]),t._v(" "),_("p",[t._v("git push origin master # 将本地主分支推到远程主分支")]),t._v(" "),_("p",[t._v("git push -u origin master # 将本地主分支推到远程(如无远程主分支则创建，用于初始化远程仓库)")]),t._v(" "),_("p",[t._v("git push origin <local_branch> # 创建远程分支， origin是远程仓库名")]),t._v(" "),_("p",[t._v("git push origin <local_branch>:<remote_branch> # 创建远程分支")]),t._v(" "),_("p",[t._v("git push origin :<remote_branch> #先删除本地分支(git br -d )，然后再push删除远程分支")]),t._v(" "),_("h3",{attrs:{id:"git远程仓库管理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git远程仓库管理"}},[t._v("#")]),t._v(" Git远程仓库管理")]),t._v(" "),_("p",[t._v("git remote -v # 查看远程服务器地址和仓库名称")]),t._v(" "),_("p",[t._v("git remote show origin # 查看远程服务器仓库状态")]),t._v(" "),_("p",[t._v("git remote add origin git@ github:robbin/robbin_site.git # 添加远程仓库地址")]),t._v(" "),_("p",[t._v("git remote set-url origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址(用于修改远程仓库地址) git remote rm # 删除远程仓库")]),t._v(" "),_("h3",{attrs:{id:"创建远程仓库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#创建远程仓库"}},[t._v("#")]),t._v(" 创建远程仓库")]),t._v(" "),_("p",[t._v("git clone --bare robbin_site robbin_site.git # 用带版本的项目创建纯版本仓库")]),t._v(" "),_("p",[t._v("scp -r my_project.git git@ git.csdn.net:~ # 将纯仓库上传到服务器上")]),t._v(" "),_("p",[t._v("mkdir robbin_site.git && cd robbin_site.git && git --bare init # 在服务器创建纯仓库")]),t._v(" "),_("p",[t._v("git remote add origin git@ github.com:robbin/robbin_site.git # 设置远程仓库地址")]),t._v(" "),_("p",[t._v("git push -u origin master # 客户端首次提交")]),t._v(" "),_("p",[t._v("git push -u origin develop # 首次将本地develop分支提交到远程develop分支，并且track")]),t._v(" "),_("p",[t._v("git remote set-head origin master # 设置远程仓库的HEAD指向master分支")]),t._v(" "),_("h3",{attrs:{id:"设置跟踪远程库和本地库"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#设置跟踪远程库和本地库"}},[t._v("#")]),t._v(" 设置跟踪远程库和本地库")]),t._v(" "),_("p",[t._v("git branch --set-upstream master origin/master")]),t._v(" "),_("p",[t._v("git branch --set-upstream develop origin/develop")])])}),[],!1,null,null,null);i.default=r.exports}}]);